import { useState, useCallback, useMemo } from "react";
import { motion } from "framer-motion";
import { Button } from "@/components/ui/button";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import {
  Download,
  Copy,
  Check,
  ExternalLink,
  FileText,
  File,
  FileImage,
  Play,
  Pause,
  Volume2,
  Maximize,
  Share2,
  Clock,
  Users,
  Eye,
} from "lucide-react";
import { extractVideoId, getEmbedUrl } from "@/lib/videoUtils";
import jsPDF from 'jspdf' 

export default function TranscriptDisplay({ transcript, videoUrl }) {
  const [copied, setCopied] = useState(false);
  const [isPlaying, setIsPlaying] = useState(false);
  const [downloadProgress, setDownloadProgress] = useState({});

  const videoId = useMemo(() => extractVideoId(videoUrl), [videoUrl]);
  const embedUrl = useMemo(() => getEmbedUrl(videoId), [videoId]);

  // Function to decode HTML entities - MOVED BEFORE IT'S USED
  const decodeHtmlEntities = useCallback((text) => {
    const textArea = document.createElement("textarea");
    textArea.innerHTML = text;
    return textArea.value;
  }, []);

  const copyToClipboard = useCallback(() => {
    const cleanTranscript = decodeHtmlEntities(transcript);
    navigator.clipboard.writeText(cleanTranscript);
    setCopied(true);
    setTimeout(() => setCopied(false), 2000);
  }, [transcript, decodeHtmlEntities]);

  const downloadTranscript = useCallback(
    (format = "txt") => {
      const timestamp = new Date().getTime();
      let blob, filename;

      // Decode HTML entities in transcript
      const cleanTranscript = decodeHtmlEntities(transcript);

      // Simulate download progress
      setDownloadProgress((prev) => ({ ...prev, [format]: 0 }));

      const progressInterval = setInterval(() => {
        setDownloadProgress((prev) => {
          const current = prev[format] || 0;
          if (current >= 100) {
            clearInterval(progressInterval);
            return { ...prev, [format]: 0 };
          }
          return { ...prev, [format]: current + 10 };
        });
      }, 50);

      setTimeout(() => {
        switch (format) {
          case "txt":
            blob = new Blob([cleanTranscript], { type: "text/plain" });
            filename = `cleantranscribe-${timestamp}.txt`;
            break;

          case "pdf":
            // Create actual PDF using jsPDF
            const pdf = new jsPDF();

            // Add header
            pdf.setFontSize(20);
            pdf.setTextColor(0, 123, 255); // Blue color
            pdf.text("CleanTranscribe", 20, 20);

            pdf.setFontSize(10);
            pdf.setTextColor(102, 102, 102); // Gray color
            pdf.text(
              `YouTube Video Transcript - Generated on ${new Date().toLocaleDateString()}`,
              20,
              30
            );

            // Add a line separator
            pdf.setDrawColor(0, 123, 255);
            pdf.line(20, 35, 190, 35);

            // Add transcript content
            pdf.setFontSize(12);
            pdf.setTextColor(0, 0, 0); // Black color

            // Split text into lines that fit the page width
            const lines = pdf.splitTextToSize(cleanTranscript, 170); // 170 is the max width
            let yPosition = 50;
            const pageHeight = 280; // A4 page height minus margins

            lines.forEach((line) => {
              if (yPosition > pageHeight) {
                pdf.addPage();
                yPosition = 20;
              }
              pdf.text(line, 20, yPosition);
              yPosition += 7; // Line height
            });

            // Add footer on last page
            const totalPages = pdf.internal.getNumberOfPages();
            for (let i = 1; i <= totalPages; i++) {
              pdf.setPage(i);
              pdf.setFontSize(8);
              pdf.setTextColor(102, 102, 102);
              pdf.text(
                "Generated by CleanTranscribe - Free YouTube Transcript Tool",
                20,
                290
              );
              pdf.text(`Page ${i} of ${totalPages}`, 170, 290);
            }

            // Generate PDF blob
            const pdfBlob = pdf.output("blob");
            blob = pdfBlob;
            filename = `cleantranscribe-${timestamp}.pdf`;
            break;

          case "docx":
            // For DOCX, create a proper Word-compatible HTML document
            const docxContent = `
            <!DOCTYPE html>
            <html xmlns:o="urn:schemas-microsoft-com:office:office" xmlns:w="urn:schemas-microsoft-com:office:word">
            <head>
              <title>CleanTranscribe - YouTube Transcript</title>
              <meta charset="utf-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <!--[if gte mso 9]>
              <xml>
                <w:WordDocument>
                  <w:View>Print</w:View>
                  <w:Zoom>90</w:Zoom>
                </w:WordDocument>
              </xml>
              <![endif]-->
              <style>
                @page { margin: 1in; }
                body { 
                  font-family: 'Times New Roman', serif; 
                  font-size: 12pt; 
                  line-height: 1.5; 
                  color: #000;
                  margin: 0;
                }
                .header { 
                  text-align: center; 
                  margin-bottom: 30px; 
                  padding-bottom: 15px; 
                  border-bottom: 1pt solid #000; 
                }
                .header h1 { 
                  color: #000; 
                  margin: 0; 
                  font-size: 18pt;
                  font-weight: bold;
                }
                .header p { 
                  color: #333; 
                  margin: 5px 0 0 0; 
                  font-size: 10pt;
                  font-style: italic;
                }
                .transcript { 
                  white-space: pre-wrap; 
                  font-size: 12pt;
                  line-height: 1.5;
                  font-family: 'Times New Roman', serif;
                  text-align: justify;
                }
                .footer {
                  margin-top: 30px;
                  padding-top: 15px;
                  border-top: 1pt solid #000;
                  text-align: center;
                  color: #333;
                  font-size: 10pt;
                  font-style: italic;
                }
              </style>
            </head>
            <body>
              <div class="header">
                <h1>CleanTranscribe</h1>
                <p>YouTube Video Transcript - Generated on ${new Date().toLocaleDateString()}</p>
              </div>
              <div class="transcript">${cleanTranscript}</div>
              <div class="footer">
                <p>Generated by CleanTranscribe - Free YouTube Transcript Tool</p>
                <p>Visit: https://cleantranscribe.com</p>
              </div>
            </body>
            </html>
          `;
            blob = new Blob([docxContent], { type: "application/msword" });
            filename = `cleantranscribe-${timestamp}.doc`;
            break;

          default:
            blob = new Blob([cleanTranscript], { type: "text/plain" });
            filename = `cleantranscribe-${timestamp}.txt`;
        }

        // Download the file
        const url = URL.createObjectURL(blob);
        const a = document.createElement("a");
        a.href = url;
        a.download = filename;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        URL.revokeObjectURL(url);
      }, 500);
    },
    [transcript, decodeHtmlEntities]
  );

  const wordCount = useMemo(() => {
    const cleanTranscript = decodeHtmlEntities(transcript);
    return cleanTranscript.split(/\s+/).filter((word) => word.length > 0)
      .length;
  }, [transcript, decodeHtmlEntities]);

  const characterCount = useMemo(() => {
    const cleanTranscript = decodeHtmlEntities(transcript);
    return cleanTranscript.length;
  }, [transcript, decodeHtmlEntities]);

  const estimatedReadingTime = useMemo(() => {
    const wordsPerMinute = 200;
    return Math.ceil(wordCount / wordsPerMinute);
  }, [wordCount]);

  return (
    <div className="space-y-8">
      {/* Video Preview */}
      <Card className="bg-white/10 backdrop-blur-xl border-white/20 shadow-2xl overflow-hidden">
        <CardHeader>
          <div className="flex items-center justify-between">
            <div>
              <CardTitle className="flex items-center gap-2 text-white">
                <Play className="h-5 w-5" />
                Video Player
              </CardTitle>
              <CardDescription className="text-gray-300">
                Watch the video while reading the transcript
              </CardDescription>
            </div>
            <Badge
              variant="outline"
              className="text-blue-400 border-blue-400/50 bg-blue-500/10 flex items-center gap-1"
            >
              <Eye className="h-3 w-3" />
              Preview
            </Badge>
          </div>
        </CardHeader>
        <CardContent>
          <div className="relative aspect-video bg-gray-800 rounded-lg overflow-hidden">
            <iframe
              src={embedUrl}
              title="YouTube video player"
              frameBorder="0"
              allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share"
              allowFullScreen
              className="w-full h-full"
            />
          </div>
          <div className="flex items-center justify-between mt-4">
            <div className="flex items-center gap-4 text-sm text-gray-400">
              <span className="flex items-center gap-1">
                <FileText className="h-4 w-4" />
                {wordCount} words
              </span>
              <span className="flex items-center gap-1">
                <Clock className="h-4 w-4" />
                {estimatedReadingTime} min read
              </span>
              <span className="flex items-center gap-1">
                <File className="h-4 w-4" />
                {characterCount} characters
              </span>
            </div>
            <div className="flex items-center gap-2">
              <Badge
                variant="outline"
                className="text-green-400 border-green-400/50 bg-green-500/10"
              >
                ✓ Timestamps Removed
              </Badge>
              <Badge
                variant="outline"
                className="text-blue-400 border-blue-400/50 bg-blue-500/10"
              >
                ✓ Clean Format
              </Badge>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Transcript Stats */}
      <Card className="bg-white/10 backdrop-blur-xl border-white/20 shadow-2xl">
        <CardContent className="p-6">
          <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-center">
            <div>
              <div className="text-2xl font-bold text-blue-400">
                {wordCount.toLocaleString()}
              </div>
              <div className="text-sm text-gray-300">Words</div>
            </div>
            <div>
              <div className="text-2xl font-bold text-blue-400">
                {characterCount.toLocaleString()}
              </div>
              <div className="text-sm text-gray-300">Characters</div>
            </div>
            <div>
              <div className="text-2xl font-bold text-blue-400">
                {estimatedReadingTime}
              </div>
              <div className="text-sm text-gray-300">Min Read</div>
            </div>
            <div>
              <div className="text-2xl font-bold text-blue-400">100%</div>
              <div className="text-sm text-gray-300">Clean</div>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Action Buttons */}
      <Card className="bg-white/10 backdrop-blur-xl border-white/20 shadow-2xl">
        <CardHeader>
          <CardTitle className="flex items-center gap-2 text-white">
            <Download className="h-5 w-5" />
            Download & Share
          </CardTitle>
          <CardDescription className="text-gray-300">
            Get your transcript in multiple formats or copy to clipboard
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-3">
            <Button
              onClick={() => downloadTranscript("txt")}
              variant="outline"
              className="h-12 flex items-center gap-2 border-white/20 text-white hover:bg-white/10"
              disabled={downloadProgress.txt > 0}
            >
              <FileText className="h-4 w-4" />
              {downloadProgress.txt > 0 ? `${downloadProgress.txt}%` : "TXT"}
            </Button>
            <Button
              onClick={() => downloadTranscript("pdf")}
              variant="outline"
              className="h-12 flex items-center gap-2 border-white/20 text-white hover:bg-white/10"
              disabled={downloadProgress.pdf > 0}
            >
              <File className="h-4 w-4" />
              {downloadProgress.pdf > 0 ? `${downloadProgress.pdf}%` : "PDF"}
            </Button>
            <Button
              onClick={() => downloadTranscript("docx")}
              variant="outline"
              className="h-12 flex items-center gap-2 border-white/20 text-white hover:bg-white/10"
              disabled={downloadProgress.docx > 0}
            >
              <ExternalLink className="h-4 w-4" />
              {downloadProgress.docx > 0 ? `${downloadProgress.docx}%` : "DOCX"}
            </Button>
            <Button
              onClick={copyToClipboard}
              variant={copied ? "default" : "outline"}
              className="h-12 flex items-center gap-2 bg-white/10 border-white/20 text-white hover:bg-white/20"
            >
              {copied ? (
                <Check className="h-4 w-4" />
              ) : (
                <Copy className="h-4 w-4" />
              )}
              {copied ? "Copied!" : "Copy"}
            </Button>
          </div>
        </CardContent>
      </Card>

      {/* Transcript Content */}
      <Card className="bg-white/10 backdrop-blur-xl border-white/20 shadow-2xl">
        <CardHeader>
          <CardTitle className="flex items-center gap-2 text-white">
            <FileText className="h-5 w-5" />
            Clean Transcript
          </CardTitle>
          <CardDescription className="text-gray-300">
            Timestamps removed, ready to use
          </CardDescription>
        </CardHeader>
        <CardContent>
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5 }}
            className="bg-gray-800/50 rounded-lg p-6 max-h-96 overflow-y-auto border border-white/20"
          >
            <pre className="whitespace-pre-wrap text-sm leading-relaxed text-gray-200 font-sans">
              {decodeHtmlEntities(transcript)}
            </pre>
          </motion.div>
        </CardContent>
      </Card>

      {/* Success Message */}
      <motion.div
        initial={{ opacity: 0, scale: 0.95 }}
        animate={{ opacity: 1, scale: 1 }}
        transition={{ duration: 0.5, delay: 0.3 }}
        className="bg-white/10 backdrop-blur-xl border-white/20 rounded-lg p-6 text-center"
      >
        <div className="flex items-center justify-center gap-2 text-green-400 mb-2">
          <Check className="h-5 w-5" />
          <span className="font-semibold">
            Transcript Successfully Generated!
          </span>
        </div>
        <p className="text-sm text-gray-300">
          Your clean transcript is ready. Download it in your preferred format
          or copy to clipboard.
        </p>
      </motion.div>
    </div>
  );
}
